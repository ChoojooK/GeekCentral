# Variables and Data Types

Welcome to the world of programming! Variables and data types are the foundation of all programs. This guide introduces these concepts for absolute beginners.

---

## Table of Contents

1. [What Is a Variable?](#what-is-a-variable)
2. [Why Variables Matter](#why-variables-matter)
3. [Naming Variables](#naming-variables)
4. [Data Types Overview](#data-types-overview)
5. [Primitive Data Types](#primitive-data-types)
   - [Numbers](#numbers)
   - [Strings](#strings)
   - [Booleans](#booleans)
   - [Null / None / Undefined](#null--none--undefined)
6. [Composite (Structured) Data Types](#composite-structured-data-types)
   - [Arrays / Lists](#arrays--lists)
   - [Objects / Dictionaries / Maps](#objects--dictionaries--maps)
7. [Static vs Dynamic Typing](#static-vs-dynamic-typing)
8. [Strong vs Weak Typing](#strong-vs-weak-typing)
9. [Declaring Variables in Different Languages](#declaring-variables-in-different-languages)
   - [Python](#python)
   - [JavaScript](#javascript)
   - [Java](#java)
10. [Type Conversion (Casting)](#type-conversion-casting)
11. [Best Practices](#best-practices)
12. [Common Errors & How to Fix Them](#common-errors--how-to-fix-them)
13. [Exercises](#exercises)
14. [Further Reading & Resources](#further-reading--resources)

---

## What Is a Variable?
A **variable** is a named storage location in a computer's memory that holds a value. Think of it as a labeled box where you store data that your program can use and manipulate.

```js
// Example (JavaScript)
let age = 25; // 'age' is a variable storing the number 25
```

### Key Points
- **Name**: Identifies the variable (e.g., `age`).
- **Value**: The data stored (e.g., `25`).
- **Type**: The category of data (e.g., number, text).

## Why Variables Matter
- **Readability**: Clear names make code easier to understand.
- **Reusability**: Store values once, use many times.
- **Flexibility**: Change the stored value without rewriting expressions.

## Naming Variables
Good variable names convey purpose:

- Use **camelCase** in JavaScript and Java (e.g., `studentName`).
- Use **snake_case** in Python (e.g., `student_name`).
- Start with a letter or underscore (`_`).
- Avoid spaces and special characters (`!`, `@`, `#`).
- Use descriptive names (e.g., `totalPrice` rather than `tp`).

```python
# Bad:
x = 5
# Good:
number_of_apples = 5
```

## Data Types Overview
A **data type** defines the kind of data a variable can hold. Different languages support various types:

| Category     | Examples                        |
| ------------ | ------------------------------- |
| Primitive    | Number, String, Boolean, Null   |
| Composite    | Array/List, Object/Dictionary   |

Each type determines:
- How much memory is used.
- What operations you can perform (e.g., you can add numbers, but concatenating two booleans doesn’t make sense).

## Primitive Data Types

### Numbers
Represent integer (whole) or floating-point (decimal) values.

```js
let count = 10;      // integer
let price = 9.99;    // floating-point
```

**Operations**: `+`, `-`, `*`, `/`, `%` (modulo).

### Strings
Sequence of characters (text) wrapped in quotes.

```python
name = "Alice"    # double quotes
greeting = 'Hi!'   # single quotes
```

**Operations**: concatenation (`+`), length (`len()` in Python), indexing (`str[0]`).

### Booleans
Represent logical values: `true` or `false`.

```js
let isVisible = false;
```

**Common uses**: conditionals (`if`, `while`), toggles.

### Null / None / Undefined
Indicates the absence of a value.

- **JavaScript**: `null` (explicit no-value), `undefined` (declared but not assigned).
- **Python**: `None`.

```js
let data = null;
let x;
console.log(x); // undefined
```

## Composite (Structured) Data Types

### Arrays / Lists
Ordered collections of values, accessed by index (starting at 0).

```js
let colors = ['red', 'green', 'blue'];
console.log(colors[1]); // 'green'
```

```python
numbers = [1, 2, 3, 4]
print(numbers[2])  # 3
```

### Objects / Dictionaries / Maps
Collections of key–value pairs, where keys are identifiers and values can be any type.

```js
let person = {
  name: 'Bob',
  age: 30
};
console.log(person.name);
```

```python
person = {
  'name': 'Bob',
  'age': 30
}
print(person['age'])
```

## Static vs Dynamic Typing
- **Static Typing**: Types are checked at compile-time (e.g., Java, C#).
- **Dynamic Typing**: Types are checked at run-time (e.g., Python, JavaScript).

```java
int x = 5;
x = "hello"; // Error: incompatible types
```

```js
let x = 5;
x = "hello"; // Allowed
```

## Strong vs Weak Typing
- **Strong Typing**: Prevents mixing of unrelated types without explicit conversion (e.g., Python, Java).
- **Weak Typing**: Implicit conversions are allowed (e.g., JavaScript).

```js
console.log('5' - 2); // 3 (string '5' converted to number)
```

## Declaring Variables in Different Languages

### Python
```python
# No explicit keyword
count = 10
name = "Alice"
```

### JavaScript
```js
// var, let, or const
var x = 5;     // function-scoped (older)
let y = 10;    // block-scoped (modern)
const PI = 3.14; // constant (read-only)
```

### Java
```java
// Declare type explicitly
int age = 25;
String name = "Charlie";
```

## Type Conversion (Casting)
Converting one type to another:

```js
let s = "123";
let n = Number(s);   // 123
```

```python
s = "456"
n = int(s)  # 456
```

> **Tip**: Watch out for invalid conversions (e.g., `int("abc")`).

## Best Practices

- Choose clear, descriptive variable names.
- Keep variable scope as small as possible.
- Use constants (`const`, uppercase names) for values that don’t change.
- Comment your code when necessary.
- Follow your language’s naming conventions.

## Common Errors & How to Fix Them

| Error                     | Cause                                  | Fix                                                     |
| ------------------------- | -------------------------------------- | ------------------------------------------------------- |
| `NameError` / `ReferenceError` | Variable not defined / misspelled  | Check spelling and ensure declaration before use.       |
| TypeError                 | Performing invalid operation on type   | Verify types or convert values before the operation.    |
| `SyntaxError`             | Missing symbol (e.g., `;`, `)`, `]:`)    | Review syntax near the error location.                  |

## Exercises

1. Declare a variable called `myAge` and assign your age.
2. Create a list/array of your three favorite foods and print the second item.
3. Define an object/dictionary for a `book` with `title`, `author`, and `pages`.
4. Convert the string `"1000"` to a number and add 50.
5. Experiment: try to add a number and string in your language—observe what happens.


## Further Reading & Resources

- [MDN Web Docs: JavaScript Data Types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures)
- [Python Official Tutorial: Numbers and Strings](https://docs.python.org/3/tutorial/introduction.html#numbers)
- [Java Tutorial: Variables and Data Types](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html)
- [Codecademy: Learn Programming Basics](https://www.codecademy.com/)

---

Congratulations! You’ve learned the fundamentals of variables and data types. Keep practicing by writing small programs and exploring how different languages handle these core concepts.

